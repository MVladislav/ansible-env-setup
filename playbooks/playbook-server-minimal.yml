---
# playbook server

# ------------------------------------------------------------------------------
- name: include pre-task playbook
  import_playbook: ./tasks/pre-tasks.yml
  remote_user: "{{ ansible_user }}"
  vars:
    ansible_user_conf_on_hosts:
      - servers
    ansible_user_conf_name: "{{ ansible_user }}"
    ansible_user_conf_update: "{{ ansible_user_config.is_update | bool }}"
    ansible_user_conf_shell: "{{ ansible_user_config.shell | default('/bin/bash') }}"
    ansible_user_conf_password: "{{ ansible_user_config.password }}"
    ansible_user_conf_group: "{{ ansible_user_config.group | default('adm,cdrom,sudo') }}"
    ansible_user_conf_system: "{{ ansible_user_config.system | default('no') | bool }}"
    ansible_user_conf_append: "{{ ansible_user_config.append | default('yes') | bool }}"
    ansible_user_conf_createhome: "{{ ansible_user_config.createhome | default('yes') | bool }}"
    ansible_user_conf_home: "{{ ansible_user_config.home | default('/home/' + ansible_user) }}"
    ansible_user_conf_add_ssh_key: "{{ ansible_user_config.add_ssh_key | default('yes') | bool }}"
    ansible_user_conf_clients: "{{ clients }}"
  when: skip_default_setup is not defined and (ansible_user_setup is defined and ansible_user_setup | bool)
  # ----------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# ------------------------------------------------------------------------------
- name: cis installer
  remote_user: "{{ ansible_user }}"
  hosts:
    - servers
  become: yes
  roles:
    ### -------------------------
    - role: ubuntu2004_cis
      ubuntu2004cis_pwquality:
        - key: "minlen"
          value: "8"
        - key: "dcredit"
          value: "-1"
        - key: "ucredit"
          value: "-1"
        - key: "ocredit"
          value: "-1"
        - key: "lcredit"
          value: "-1"
      # AIDE cron settings
      ubuntu2004cis_config_aide: true
      ubuntu2004cis_aide_cron:
        cron_user: root
        cron_file: /etc/crontab
        aide_job: "/usr/bin/aide --config /etc/aide/aide.conf --check"
        aide_minute: 0
        aide_hour: 5
        aide_day: "*"
        aide_month: "*"
        aide_weekday: "*"
      #
      ubuntu2004cis_rule_1_1_1_7: false # not work on ubuntu 21.10
      ubuntu2004cis_rule_1_5_2: false # not work on ubuntu 21.03
      ubuntu2004cis_rule_1_6_1: false # not work on ubuntu 21.03
      ubuntu2004cis_rule_1_7_1_2: false # not work on ubuntu 21.03
      ubuntu2004cis_rule_4_1_1_3: false # not work on ubuntu 21.03
      #
      ubuntu2004cis_rule_5_3_1: false # ubuntu 21.10 test, password after change not working
      ubuntu2004cis_rule_5_3_2: false # ubuntu 21.10 test, password after change not working
      ubuntu2004cis_rule_5_3_3: false # ubuntu 21.10 test, password after change not working
      ubuntu2004cis_rule_5_3_4: false # ubuntu 21.10 test, password after change not working
      when: cis_setup is defined and cis_setup | bool
    ### -------------------------
  tasks:
    - name: set/update aide variables
      lineinfile:
        dest: "/etc/default/aide"
        state: present
        regexp: "^{{ item.key }}="
        line: "{{ item.key }}={{ item.value}}"
      with_items:
        - key: CRON_DAILY_RUN
          value: "yes"
        - key: MAILTO
          value: "{{ postfix_mail_username | default('root') }}"
        - key: COPYNEWDB
          value: "yes"
        - key: TRUNCATEDETAILS
          value: "yes"
        - key: FILTERUPDATES
          value: "yes"
        - key: FILTERINSTALLATIONS
          value: "yes"
      when: cis_setup is defined and cis_setup | bool
    ### -------------------------

# ------------------------------------------------------------------------------
# ------------------------------------------------------------------------------
- name: pre installer
  remote_user: "{{ ansible_user }}"
  hosts:
    - servers
  vars:
    ufw_rules_default:
      - rule: allow
        to_port: 22
        protocol: tcp
        interface: "{{ ansible_default_ipv4['interface'] }}"
        comment: "allow incoming connection on standard ssh port"
  roles:
    ### -------------------------
    - role: ansible-updater
      when: skip_default_setup is not defined
    ### -------------------------
    - role: ansible-ssh
      when: skip_default_setup is not defined
    ### -------------------------
    - role: ansible-ufw
      become: yes
      ufw_logging: "full"
      ufw_rules: "{{ ufw_rules_default + ufw_rules_extended }}"
      when: skip_default_setup is not defined
    ### -------------------------
    - role: ansible-postfix
      become: yes
      postfix_hostname: "{{ postfix_mail_username.split('@')[1] }}.local"
      postfix_mailname: "{{ postfix_mail_username.split('@')[1] }}"
      postfix_aliases:
        - user: root
          alias: "{{ postfix_mail_username }}"
        - user: "{{ ansible_user }}"
          alias: "{{ postfix_mail_username }}"
      # postfix_header_checks:
      #   - pattern: "/From:.*/"
      #     action: REPLACE
      #     text: "From: {{ postfix_mail_username }}"
      postfix_inet_interfaces: loopback-only
      postfix_relayhost: "{{ postfix_smtp_host }}"
      postfix_relaytls: true
      postfix_sasl_user: "{{ postfix_mail_username }}"
      postfix_sasl_password: "{{ postfix_mail_password }}"
      postfix_raw_options:
        - |
          sender_canonical_classes = envelope_sender
        - |
          mailbox_size_limit = 0
        - |
          message_size_limit = 0
      when: skip_default_setup is not defined or (postfix_setup is defined and postfix_setup | bool)
    ### -------------------------

# ------------------------------------------------------------------------------
# ------------------------------------------------------------------------------
- name: server installer
  remote_user: "{{ ansible_user }}"
  hosts:
    - servers
  roles:
    ### -------------------------
    - role: ansible-install-server
      install_server_service_name: "{{ service_name }}"
      install_server_config:
        dev: yes
        apt_base: yes
        # apt_dev: no
        # apt_exfat: no
        apt_libs: yes # base|dev
        # apt_vpn: no
        # apt_go: no
        # dpkg_...: no
        # snap_...: no
        # snap_microk8s: no
        snap_btop: yes
        git: yes
        zsh: yes
        # tmux: no
        python: yes # base|dev
        # go: no
        # go_kompose: no
        # ruby: no
        # npm: no
        # mongodb: no
        # java: no # base|dev
    ### -------------------------
    - role: ansible-netplan
      netplan_service_name: "{{ service_name }}"
      when: netplan_setup is defined and netplan_setup | bool
    ### -------------------------

# ------------------------------------------------------------------------------
# ------------------------------------------------------------------------------
- name: docker installer
  remote_user: "{{ ansible_user }}"
  hosts:
    - docker
  roles:
    ### -------------------------
    - role: ansible-docker
      docker_user_shell: /bin/zsh
      docker_users_to_add_group: "{{ clients }}"
    ### -------------------------

# ------------------------------------------------------------------------------
# ------------------------------------------------------------------------------
- name: run hardening scan
  remote_user: "{{ ansible_user }}"
  hosts:
    - servers
  become: yes
  roles:
    ### -------------------------
    - role: ansible-lynis
      lynis_deploy_method: git
      lynis_git_repo: "https://github.com/CISOfy/lynis"
      lynis_report_from: "{{ hardening_lynis_report_from }}"
      lynis_report_to: "{{ hardening_lynis_report_to }}"
      when: (hardening_scan is defined and hardening_scan | bool) and (hardening_lynis_report_from is defined and hardening_lynis_report_from|length > 0 and hardening_lynis_report_to is defined and hardening_lynis_report_to|length > 0)
    ### -------------------------
